// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PracticeExamV2.Data;

#nullable disable

namespace PracticeExamV2.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PracticeExamV2.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CourseID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Courses", t =>
                        {
                            t.HasCheckConstraint("CH_Course_CourseID", "LEN([CourseID]) BETWEEN 3 AND 50");

                            t.HasCheckConstraint("CH_Course_Credits", "[Credits] >= 0 AND [Credits] <= 5");
                        });
                });

            modelBuilder.Entity("PracticeExamV2.Models.CourseAssignment", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.HasKey("CourseID", "InstructorID");

                    b.HasIndex("InstructorID");

                    b.ToTable("CoursesAssignment");
                });

            modelBuilder.Entity("PracticeExamV2.Models.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("money");

                    b.Property<int?>("InstructorID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentID");

                    b.HasIndex("InstructorID");

                    b.ToTable("Departments", t =>
                        {
                            t.HasCheckConstraint("CH_Department_Name", "LEN([Name]) BETWEEN 3 AND 50");
                        });
                });

            modelBuilder.Entity("PracticeExamV2.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<int>("GradeCode")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentID");

                    b.ToTable("Enrollments", t =>
                        {
                            t.HasCheckConstraint("CK_Enrollment_Grade", "[Grade] IS NULL OR [Grade] IN (1, 2, 3, 4, 5, 6)");
                        });
                });

            modelBuilder.Entity("PracticeExamV2.Models.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Instructors", t =>
                        {
                            t.HasCheckConstraint("CH_Instructor_FirstName", "LEN([FirstName]) <= 50");

                            t.HasCheckConstraint("CH_Instructor_LastName", "LEN([LastName]) <= 50");
                        });
                });

            modelBuilder.Entity("PracticeExamV2.Models.OfficeAssignment", b =>
                {
                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InstructorID");

                    b.ToTable("OfficeAssignments", t =>
                        {
                            t.HasCheckConstraint("CH_OfficeAssignment_Location", "LEN([Location]) <= 50");
                        });
                });

            modelBuilder.Entity("PracticeExamV2.Models.Student", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstMidName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Students", t =>
                        {
                            t.HasCheckConstraint("CH_Student_FirstMidName", "LEN([FirstMidName]) <= 50");

                            t.HasCheckConstraint("CH_Student_LastName", "LEN([LastName]) <= 50");
                        });
                });

            modelBuilder.Entity("PracticeExamV2.Models.Course", b =>
                {
                    b.HasOne("PracticeExamV2.Models.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("PracticeExamV2.Models.CourseAssignment", b =>
                {
                    b.HasOne("PracticeExamV2.Models.Course", "Course")
                        .WithMany("CourseAssignment")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticeExamV2.Models.Instructor", "Instructor")
                        .WithMany("CourseAssignment")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("PracticeExamV2.Models.Department", b =>
                {
                    b.HasOne("PracticeExamV2.Models.Instructor", "Instructor")
                        .WithMany("Departments")
                        .HasForeignKey("InstructorID");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("PracticeExamV2.Models.Enrollment", b =>
                {
                    b.HasOne("PracticeExamV2.Models.Course", "Course")
                        .WithMany("Enrollment")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticeExamV2.Models.Student", "Student")
                        .WithMany("Enrollment")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("PracticeExamV2.Models.OfficeAssignment", b =>
                {
                    b.HasOne("PracticeExamV2.Models.Instructor", "Instructor")
                        .WithOne("OfficeAssignment")
                        .HasForeignKey("PracticeExamV2.Models.OfficeAssignment", "InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("PracticeExamV2.Models.Course", b =>
                {
                    b.Navigation("CourseAssignment");

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("PracticeExamV2.Models.Department", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("PracticeExamV2.Models.Instructor", b =>
                {
                    b.Navigation("CourseAssignment");

                    b.Navigation("Departments");

                    b.Navigation("OfficeAssignment");
                });

            modelBuilder.Entity("PracticeExamV2.Models.Student", b =>
                {
                    b.Navigation("Enrollment");
                });
#pragma warning restore 612, 618
        }
    }
}
